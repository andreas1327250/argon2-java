package at.gadermaier.argon2;

import at.gadermaier.argon2.model.Argon2Type;

public class Constants {

    public static class Defaults{

        public static int OUTLEN_DEF = 32;
        public static int T_COST_DEF = 3;
        public static int LOG_M_COST_DEF = 12;
        public static int LANES_DEF = 1;
        public static Argon2Type TYPE_DEF = Argon2Type.Argon2i;
        public static int VERSION_DEF = ARGON2_VERSION_13;
        public static int ARGON2_VERSION_NUMBER = ARGON2_VERSION_13;
        public static boolean ENCODED_ONLY = false;
        public static boolean RAW_ONLY = false;
    }

    /*
    * Argon2 input parameter restrictions
    */
    public static class Constraints{

        public static int MAX_PASSWORD_LEN = 128;

        /* Minimum and maximum number of lanes (degree of parallelism) */
        public static int MIN_PARALLELISM = 1;
        public static int MAX_PARALLELISM = 16777216;

        /* Minimum and maximum digest size in bytes */
        public static int MIN_OUTLEN = 4;
        public static int MAX_OUTLEN = Integer.MAX_VALUE;

        /* Minimum and maximum number of memory blocks (each of BLOCK_SIZE bytes) */
        public static int MIN_MEMORY = (2 * ARGON2_SYNC_POINTS); /* 2 blocks per slice */

        /* Minimum and maximum number of passes */
        public static int MIN_ITERATIONS = 1;
        public static int MAX_ITERATIONS = Integer.MAX_VALUE;

        /* Minimum and maximum password length in bytes */
        public static int MIN_PWD_LENGTH = 0;
        public static int MAX_PWD_LENGTH = Integer.MAX_VALUE;

        /* Minimum and maximum salt length in bytes */
        public static int MIN_SALT_LENGTH = 0;
        public static int MAX_SALT_LENGTH = Integer.MAX_VALUE;

        /* Minimum and maximum key length in bytes */
        public static int MAX_SECRET_LENGTH = Integer.MAX_VALUE;

        /* Minimum and maximum associated model length in bytes */
        public static int MAX_AD_LENGTH = Integer.MAX_VALUE;
    }

    public static class Messages{
        public static String P_MIN_MSG = "degree of parallelism cannot be smaller than one";
        public static String P_MAX_MSG = "parallelism cannot be greater than 16777216";

        public static String M_MIN_MSG = "memory too small";

        public static String T_MIN_MSG = "number of iterations cannot be less than one";
        public static String T_MAX_MSG = "number of iterations too high";

        public static String PWD_MIN_MSG = "password too short";
        public static String PWD_MAX_MSG = "password too long";

        public static String SALT_MIN_MSG = "salt too short";
        public static String SALT_MAX_MSG = "salt too long";

        public static String SECRET_MAX_MSG = "secret too long";
        public static String ADDITIONAL_MAX_MSG = "additional data too long";

    }

    /* Memory block size in bytes */
    public static int ARGON2_BLOCK_SIZE = 1024;
    public static int ARGON2_QWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 8;
    public static int ARGON2_OWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 16;

    /* Number of pseudo-random values generated by one call to Blake in Argon2i
       to
       generate reference block positions
     */
    public static int ARGON2_ADDRESSES_IN_BLOCK = 128;
    /* Pre-hashing digest length and its extension*/
    public static int ARGON2_PREHASH_DIGEST_LENGTH = 64;
    public static int ARGON2_PREHASH_SEED_LENGTH = 72;


    /* Number of synchronization points between lanes per pass */
    public static int ARGON2_SYNC_POINTS = 4;

    /* Max memory size is addressing-space/2, topping at 2^32 blocks (4 TB) */
    //public static int ARGON2_MAX_MEMORY_BITS                                                 \
    //ARGON2_MIN(UINT32_C(32), (sizeof(void *) * CHAR_BIT - 10 - 1))
    //public static int ARGON2_MAX_MEMORY                                                      \
    //ARGON2_MIN(UINT32_C(0xFFFFFFFF), UINT64_C(1) << ARGON2_MAX_MEMORY_BITS)

    /* Flags to determine which fields are securely wiped (default = no wipe). */
    public static int ARGON2_DEFAULT_FLAGS = 0;
    //public static int ARGON2_FLAG_CLEAR_PASSWORD (UINT32_C(1) << 0)
    //public static int ARGON2_FLAG_CLEAR_SECRET (UINT32_C(1) << 1)

    public static int ARGON2_VERSION_10 = 0x10;
    public static int ARGON2_VERSION_13 = 0x13;

}
